<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 * Example on how to alter theme settings form
 */
function napo_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}

/**
 * Add class url-alias in body tag
 */
function napo_theme_preprocess_html(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')
    ->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = \Drupal\Component\Utility\Html::cleanCssIdentifier($path_alias);
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views unformatted template suggestions.
 *
 * @inheritdoc
 */
function napo_theme_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  return [
    'views_view_unformatted__' . $variables['view']->id(),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function napo_theme_preprocess_node(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['language'] = $language;

  $default_youtube = NULL;
  $field_video_list = "yes";
  $numberItemOriginal = 0;
  $videoNames = [];

  if ($variables['node']->bundle() == "napo_video") {
    if (count($variables['node']->get('field_youtube')->getValue()) > 0) {
      $default_youtube = $variables['node']->get('field_youtube')
        ->getValue()[0]['value'];
    }
    if ($default_youtube == NULL) {
      $originalNode = $default_youtube = $variables['node']->getUntranslated();
      if(isset($originalNode->get('field_youtube')->getValue()[0]['value'])){
        $default_youtube = $variables['node']->getUntranslated()
          ->get('field_youtube')
          ->getValue()[0]['value'];
      }
    }

    if (count($variables['node']->get('field_video')->getValue()) == 0) {
      $field_video_list = "no";
      $numberItemOriginal = count($variables['node']->getUntranslated()
        ->get('field_video')
        ->getValue());
      foreach ($variables['node']->getUntranslated()
                 ->get('field_video')
                 ->getValue() as $item) {
        $storage = Drupal::entityTypeManager()->getStorage('media');
        array_push($videoNames, $storage->load($item['target_id'])
          ->get('name')
          ->getValue()[0]['value']);
      }

    }

    $variables['default_youtube'] = $default_youtube;
    $variables['field_video_list'] = $field_video_list;
    $variables['numberItemOriginal'] = $numberItemOriginal;
    $variables['videoNames'] = $videoNames;

    if($variables['node']->get('field_video_type')[0]->getValue()['target_id'] == 2726 ) {
      $variables['parent_title'] = $variables['node']->get('field_parent_title')->getValue()[0]['value'];
    }

  }
}
