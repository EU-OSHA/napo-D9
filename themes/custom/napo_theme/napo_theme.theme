<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 * Example on how to alter theme settings form
 */
function napo_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}

/**
 * Add class url-alias in body tag
 */
function napo_theme_preprocess_html(&$variables){
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = \Drupal\Component\Utility\Html::cleanCssIdentifier($path_alias);
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views unformatted template suggestions.
 *
 * @inheritdoc
 */
function napo_theme_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  return [
    'views_view_unformatted__' . $variables['view']->id()
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function napo_theme_preprocess_node(&$variables) {
  $default_youtube = null;
  $field_video_list = false;
  if($variables['node']->bundle()== "napo_video"){
    if(count($variables['node']->get('field_youtube')->getValue()) > 0){
      $default_youtube = $variables['node']->get('field_youtube')->getValue()[0]['value'];
    }
    ksm($variables['node']->get('field_video')->getValue());
    if(count($variables['node']->get('field_video')->getValue()) > 0){
      $field_video_list = true;
    }
    if($default_youtube == null){
      $default_youtube = $variables['node']->getUntranslated()->get('field_youtube')->getValue()[0]['value'];
    }





    $variables['default_youtube'] = $default_youtube;
    $variables['field_video_list'] = $field_video_list;
  }
}
