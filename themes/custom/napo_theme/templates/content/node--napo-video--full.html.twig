{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{{ attach_library('bootstrap_barrio/node') }}

{%
  set classes = [
  'node',
  'node--type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  'clearfix',
]
%}


{% if '&' in node.field_youtube.value %}
  {%  set video_url = node.field_youtube.value |split('&') %}
  {%  set video_url = video_url[0] |split('=')  %}
  {%  set video_url = video_url[1] %}
{% else %}
  {%  set video_url = node.field_youtube.value |split('=') %}
  {%  set video_url = video_url[1] %}
{% endif %}

{% if node.field_video_type[0].entity.label == "Episode video"  %}
  {% set video_img =  node.field_video.entity.label %}
  {% set video_img =  node.field_video.entity.label |split('.') %}
  {% set video_img =  video_img[0] %}
{% endif %}

<div class="back-button-custom"><a href="/napos-films/films">{{ 'Back to Films' | trans }}</a></div>
<article{{ attributes.addClass(classes) }}>
  <div class="video-custom">
    {% if not node.field_video_type[0].entity.label == "Episode video"  %}
      {% for item in node.field_video  %}
        {% if item.entity.field_media_video_file.entity.getMimeType() == "video/mp4" %}
          <div id="videoCustom" class="video-custom">
            {{ drupal_entity("media", item.target_id) }}
            <img src="/sites/napo/files/images/napo_video/{{ video_img }}.jpg" class="video-custom__image" />
            <button type="button" class="video-custom__playButton playButton-1" id="videoPlayCustomButton"></button>
          </div>
        {% endif %}
      {% endfor %}
   {% else %}
      <iframe width="1110" height="641" src="https://www.youtube-nocookie.com/embed/{{ video_url }}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    {% endif %}
  </div>
  {% if drupal_view_result('episode_list', 'scenes') is not empty %}
    <div class="view-scenes-custom">
      <h2>{{ 'View scenes' | trans }}</h2>
      {{ drupal_view('episode_list', 'scenes') }}
    </div>
  {% endif %}
  <div class="conten-video-info">
    <div class="napo-film-title-2">{{ label }}</div>
    <div class="napo-film-video-download-form">
      <div class="download">
        {% for item in node.field_video  %}
          <a href="/napos-films/{{ node.id }}/video/download?number={{loop.index-1}}">{{ item.entity.field_media_video_file.entity.filename.0.value | split('.')[item.entity.field_media_video_file.entity.filename.0.value | split('.') | length -1] }}
          </a>
        {% endfor %}
      </div>
      <div class="share-links-node">
        <div class="napo-share-widget"></div>
        {{ content.addtoany }}
      </div>
    </div>
  </div>
  <div class="conten-video-info-tags">
    <div class="categories">{{ content.field_combined_tags }}</div>
    <div class="body">{{ content.body }}</div>
  </div>
  <div class="recommended-films">
    <div>{{ 'Other films recommended for you' | trans }}</div>
    {{ drupal_view('recommended_films', 'recommended_films_block', node.id) }}
  </div>
</article>
