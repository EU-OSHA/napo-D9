{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{{ attach_library('bootstrap_barrio/node') }}

{%
  set classes = [
  'node',
  'node--type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  'clearfix',
]
%}

{% if '&' in default_youtube %}
  {%  set video_url = default_youtube |split('&') %}
  {%  set video_url = video_url[0] |split('=')  %}
  {%  set video_url = video_url[1] %}
{% else %}
  {%  set video_url = default_youtube |split('=') %}
  {%  set video_url = video_url[1] %}
{% endif %}

{% if node.field_video_type[0].entity.label == "Episode video"  %}
  {% set video_img =  node.field_video.entity.label %}
  {% set video_img =  node.field_video.entity.label |split('.') %}
  {% set video_img =  video_img[0] %}
{% endif %}

{% set categories = node.field_combined_tags.value %}
{% set main_category = node.field_main_tag.value %}
{% set categories = categories.appendItem(main_category) %}

<div class="back-button-custom">
  {% if language == "pt-pt"  %}
    <a href="{{ path }}/pt/napos-films/films?films=all">{{ 'Back to Films' | trans }}</a>
  {% else %}
    <a href="{{ path }}/{{ language }}/napos-films/films">{{ 'Back to Films' | trans }}</a>
  {% endif %}
</div>

<article{{ attributes.addClass(classes) }}>
  <div class="categories">
    {% if node.field_video_type[0].entity.label == "Film video" %}
      {% set combined_categories = content.field_main_tag|merge(content.field_combined_tags) %}
      <div class="field field--type-entity-reference field--label-inline">
        <div class="field__label">{{ "Categories"|t }}</div>
        <div class="field__items">
          <div class="field__items">
            {{ combined_categories }}
          </div>
        </div>
      </div>
    {% endif %}

    {% if node.field_video_type[0].entity.label == "Episode video"%}
      {% set main_tag_tid = node.field_napo_film.entity.field_main_tag.getValue()[0]['target_id']  %}
      {% if main_tag_tid %}
        {% set main_name = drupal_field('name', 'taxonomy_term', main_tag_tid)  %}
        {% if main_name %}
          {% set combined_categories = main_name|merge(content.field_combined_tags) %}
          {% if combined_categories %}
            <div class="field field--type-entity-reference field--label-inline">
              <div class="field__label">{{ "Categories"|t }}</div>
              <div class="field__items">
                <div class="field__items">
                  {{ combined_categories }}
                </div>
              </div>
            </div>
          {% endif %}
        {% endif %}
      {% else %}
        {% if content.field_combined_tags %}
          <div class="field field--type-entity-reference field--label-inline">
            <div class="field__label">{{ "Categories"|t }}</div>
            <div class="field__items">
              <div class="field__items">
                {{ content.field_combined_tags }}
              </div>
            </div>
          </div>
        {% endif %}
      {% endif %}
    {% endif %}
  </div>
  <div class="video-custom">
    {% if not node.field_video_type[0].entity.label == "Episode video"  %}
      {% for item in node.field_video  %}
        {% if item.entity.field_media_video_file.entity.getMimeType() == "video/mp4" %}
          <div id="videoCustom" class="video-custom">
            {{ drupal_entity("media", item.target_id) }}
            <img src="/sites/napo/files/images/napo_video/{{ video_img }}.jpg" class="video-custom__image" />
            <button type="button" class="video-custom__playButton playButton-1" id="videoPlayCustomButton"></button>
          </div>
        {% endif %}
      {% endfor %}
    {% else %}
      <iframe width="1110" height="641" src="https://www.youtube-nocookie.com/embed/{{ video_url }}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    {% endif %}
  </div>
  <div class="description-and-download">
    <div class="conten-video-info-description">
      <div class="body">{{ content.body }}</div>
    </div>
    <div class="conten-video-info">
      <div class="napo-film-video-download-form">
        <div class="download">
          {% if field_video_list == "yes" %}
            {% for item in node.field_video  %}
              <div class="content-download-custom">
                {{ drupal_block('napo_films_download_block') }}
              </div>
            {% endfor %}
          {% endif %}
          {% if field_video_list == "no" %}
            {% for i in 0..numberItemOriginal-1 %}
              <a href="/napos-films/{{ node.id }}/video/download?number={{ i }}">{{ videoNames[i] | split('.')[1] }}</a>
            {% endfor %}
          {% endif %}

        </div>
        {#      <div class="share-links-node">#}
        {#        <div class="napo-share-widget"></div>#}
        {#        {{ content.addtoany }}#}
        {#      </div>#}
      </div>
    </div>
  </div>
  {% if drupal_view_result('episode_list', 'scenes', node.label )[0]._relationship_entities.field_field_episodes is not empty %}
    {% if drupal_view_result('episode_list', 'scenes', node.label ) is not empty %}
      <div class="view-scenes-custom">
        <h2>{{ 'View scenes' | trans }}</h2>
        {{ drupal_view('episode_list', 'scenes', node.label ) }}
      </div>
    {% endif %}
  {% endif %}

  {% if drupal_view_result('thumbnails_list', 'thumbnails', node.label )[0]._relationship_entities.field_thumbnail is not empty %}
    {% if drupal_view_result('thumbnails_list', 'thumbnails', node.label ) is not empty %}
      <div class="view-thumbnails-custom">
        <h2>{{ 'Thumbnails' | trans }}</h2>
        {{ drupal_view('thumbnails_list', 'thumbnails', node.label ) }}
      </div>
    {% endif %}
  {% endif %}
  {#
  {% if node.field_video_type[0].entity.label == "Film video" %}
    {% if (node._referringItem.target_id != node.id) %}
      <div class="recommended-films">
        <div>{{ 'Other films recommended for you' | trans }}</div>
        {{ drupal_view('recommended_films', 'recommended_films_block', node.id) }}
      </div>
    {% endif %}
  {% endif %}
  #}
</article>
